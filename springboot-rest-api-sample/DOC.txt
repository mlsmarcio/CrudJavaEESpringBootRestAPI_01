Maven Project
Catalog: Maven Central
Filter: springboot-rest-api

Group id: br.com.springboot
Artifact id: curso-jdev-treinamento

Localizar as dependências do postgreSql
- maven postgresql
- https://mvnrepository.com/artifact/org.postgresql/postgresql/9.4.1212
- versão: 9.4.1212

Criar o banco de dados: nome e usuário

Definir a conexão com banco de dados no arquivo main/sources/application.properties

Criar a entidade que será uma tabela do banco de dados
- criar um pacote model seguindo o padrão de nomes
- criar uma classe , utilizar uma notação @Entity (import javax.persistence.Entity) do JPA
- implementar Serializable  (padrão para controle do java) java.io.Serializable
- especificar a notação @Id no campo id (javax.persistence)
- definir um  gerador de sequencial para a entidade logo abaixo da notação @Entity @SequenceGenerator
  @SequenceGenerator(name = "seq_usuario", sequenceName = "seq_usuario", allocationSize = 1, initialValue = 1)
  
- definir o gerador no campo Id, logo abaixo da notação @Id, @GeneratedValue
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "seq_usuario")
  
CRIAR A INTERFACE REPOSITORY
- Criar um pacote repository seguindo o padrão de nomes
- Criar a interface da entidade ex.: UsuarioRepository.java
- Adicionar a notação @Repository de org.springframework.stereotype.Repository
- estender da classe  JpaRepository<ClasseModel, TipoDoId>   de org.springframework.data.jpa.repository.JpaRepository
  obtém varios métodos úteis.
  é utilizado na classe Controller que é criada automaticamente

UTILIZAR O OBJETO REPOSITORY NO Controller
- criar o objeto adicionando a notação @Autowired (injeção de dependência)

	@RestController
	public class GreetingsController {
		@Autowired /* IC/CD ou CDI - Injeção de dependência */
		private UsuarioRepository UsuarioRepository;
	...
	

CRIANDO UMA API
 - DEVE SER PÚBLICA OU NÃO E RETORNAR UM JSON

 - Criar uma API para retornar os registros de uma tabela. O método java deve ter a notação: @GetMapping(value = "listatodos")
 

INSTALAR O MAVEN PARA GERAR O JAR DE IMPLANTAÇÃO NO SERVIDOR
	https://maven.apache.org/download.cgi
 - Descompactar na unidade C:
 C:\apache-maven-3.8.1
 - Criar a variável de ambiente  MAVEN_HOME com valor = C:\apache-maven-3.8.1\bin
 - Editar a variável Path adicionando: %MAVEN_HOME%\bin
 - Verificar a versão do maven: mvn -v
 
GERANDO O JAR DO SPRING BOOT COM MAVEN
- Obter o Path completo do projeto na opção property do projeto
	C:\Users\adm\git\JavaEeSpringbootRestApi_01\.git\springboot-rest-api-sample
	
- No prompt de comando acessar o diretório do projeto 	e colocar o comando: mvn clean package
	C:\Users\adm\git\JavaEeSpringbootRestApi_01\.git\springboot-rest-api-sample>mvn clean package

- Verificar se ocorrerá erros. Se apresentar erros devido a classe de testes, então, é possível desabilitar os testes:
  - No pom.xml adicionar nas properties: <maven.test.skip>true</maven.test.skip>

- Executar o comando novamente:  
	C:\Users\adm\git\JavaEeSpringbootRestApi_01\.git\springboot-rest-api-sample>mvn clean package
	
- Colocar o Java para exibir o log, utilizar o programa Configure Java, na aba Avançado, selecionar Show Console

- Acessar a pasta target e digitar o comando: java -jar <nome do jar>
  Ex.: c:\...\.git\springboot-rest-api-sample\target>java -jar springboot-rest-api-sample-1.0.0-SNAPSHOT.jar
  Dessa forma a API fica em execução, disponível para receber parâmetros.  

- ctrl + c  (duas vezes apra finalizar o servidor  

- CRIANDO AS PÁGINAS WEB NO SPRING BOOT
  - criar a pasta static da seguinte forma, dentro do pacote:
    src/main/sources/static

- COLOCANDO O PROJETO PARA TESTE NO HERUKU.COM
  heroku.com
  
  - Necessário baixar o heroku-cli
    https://devcenter.heroku.com/articles/heroku-cli
    selecione a opção Download and Install
  
    heruku-cli - Envia os dados para o Heroku

  
  - Necessário baixar e instalar o Git
  - Configurar o git local (CMD)
    - git config --global user.email "mlsmarciogm@gmail.com"
    
    - git config --global user.name "Márcio Lopes"
  
  - Login no heroku (cmd)
    
    - heroku login
    - ENTER (ou solicitará login e a senha)
    - Abrirá o navegador - click em login
  
  - Criar a aplicação no heroku (cmd)
    
    - heroku create "nome da aplicação"
    - Será exibida a url aplicação do heroku e também o git
  
  - Configurando o banco de dados
  
    - heroku addons:create heroku-postgresql:hobby-dev --app <nome da aplicação>
    - Criará o banco free do postgree, será exibida a variável que será necessário configurar em nosso projeto, ex.: ${DATABASE-URL}, o heroku injetará
      nessa variável a conexão.
    - Em nosso projeto, no application.properties:
      - comente a linha que especifica a url de conexão, ficará assim: spring.datasource.url= ${DATABASE-URL}
      
      - comente também as linhas:
      #spring.datasource.username=postgres
      #spring.datasource.password=admin
      #server.address=0.0.0.0
      #server.port=8000

  - Enviando nosso projeto para o heroku
    - no eclipse, em propriedades do projeto, obter o path 
    - no cmd entrar na pasta do projeto: cd...
    - git init
    - git add .   (envia o projeto)
    - git add .   (outra vez)
    - git comit -m "comit da aplicação" 
    - heroku git:remote -a <nome da aplicação>    	(acionar o repositório do git remoto, setou nosso git remoto)
    - git push heroku master	 			(enviar o projeto para o git setado)
      o projeto será processado e será disponibilizado o link para acesso ex.: "https://<nome da aplicação>.herokuapp.com/",
      para acessar será necessário colocar o nome da aplicação após o link ex.:
        https://<nome da aplicação>.herokuapp.com/<nome da aplicação>
        
    - pode ser acessado pelo navegador ou pelo cmd: heroku open	        
      
    
    
    
    - 